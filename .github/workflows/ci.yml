name: CI

on:
  push:
    branches: [ main, Backend ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug
          tools: composer

      # ⬇️ Create the env files BEFORE composer so Flex auto-scripts can read them
      - name: Create test env files
        working-directory: backend
        run: |
          cat > .env <<'EOF'
          APP_ENV=test
          APP_SECRET=test
          DATABASE_URL=mysql://symfony:password@mysql:3306/bfe_db?serverVersion=8.0
          MAILER_DSN=null://null
          EOF

          # IMPORTANT: use a dedicated test DB, disable mailer
          cat > .env.test <<'EOF'
          APP_ENV=test
          DATABASE_URL=mysql://symfony:password@mysql:3306/app_test?serverVersion=8.0
          MAILER_DSN=null://null
          EOF

      - name: Cache Composer downloads
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: Install Composer (dev) deps on host
        working-directory: backend
        env:
          COMPOSER_MEMORY_LIMIT: -1
        run: composer install --no-ansi --no-interaction --no-progress --prefer-dist --optimize-autoloader
        # If env/script issues appear, try: --no-scripts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and start ONLY the services needed for tests
      - name: Build and start containers
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml up -d mysql backend

      # Ensure env files exist inside the running container
      - name: Copy env files into backend container
        run: |
          docker compose cp backend/.env backend:/var/www/app/.env
          docker compose cp backend/.env.test backend:/var/www/app/.env.test
          docker compose exec -T backend ls -la /var/www/app | grep -E '\.env$|\.env\.test$'

      # Wait for MySQL to be healthy (requires a healthcheck on the mysql service)
      - name: Wait for MySQL healthy
        shell: bash
        run: |
          set -e
          DB_CID="$(docker compose ps -q mysql)"
          echo "DB container: $DB_CID"
          for i in {1..60}; do
            STATUS="$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{end}}' "$DB_CID")"
            echo "MySQL health: ${STATUS:-unknown}"
            if [ "$STATUS" = "healthy" ]; then
              echo "MySQL is healthy"; break
            fi
            if [ $i -eq 60 ]; then
              echo "MySQL did not become healthy in time" >&2
              docker compose logs mysql >&2 || true
              exit 1
            fi
            sleep 2
          done

      # Create & migrate the test database (force test DSN via env vars)
      - name: Prepare test DB (create + migrate)
        run: |
          docker compose exec -T \
            -e APP_ENV=test \
            -e DATABASE_URL="mysql://symfony:password@mysql:3306/app_test?serverVersion=8.0" \
            backend php bin/console doctrine:database:create --env=test --if-not-exists
          docker compose exec -T \
            -e APP_ENV=test \
            -e DATABASE_URL="mysql://symfony:password@mysql:3306/app_test?serverVersion=8.0" \
            backend php bin/console doctrine:migrations:migrate --env=test -n || true

      - name: Run PHPUnit with coverage inside backend container
        run: |
          docker compose exec -T \
            -e APP_ENV=test \
            -e XDEBUG_MODE=coverage \
            -e DATABASE_URL="mysql://symfony:password@mysql:3306/app_test?serverVersion=8.0" \
            backend sh -lc 'php -d xdebug.mode=coverage vendor/bin/phpunit \
              -c phpunit.dist.xml \
              --coverage-clover var/coverage.xml \
              --coverage-text'

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: backend/var/coverage.xml

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: backend/var/coverage.xml
          fail_ci_if_error: true
