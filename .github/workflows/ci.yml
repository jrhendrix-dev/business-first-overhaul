name: CI

on:
  push:
    branches: [ main, Backend ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug
          tools: composer

      - name: Cache Composer downloads
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: Install Composer (dev) deps on host
        working-directory: backend
        env:
          COMPOSER_MEMORY_LIMIT: -1
        run: composer install --no-ansi --no-interaction --no-progress --prefer-dist --optimize-autoloader

      # ── Create env files that Symfony expects ──────────────────────────────────
      # Dotenv always loads .env first; then it overlays .env.test for APP_ENV=test.
      - name: Create test env files
        working-directory: backend
        run: |
          # Base .env (required by Symfony bootstrap)
          cat > .env <<'EOF'
          APP_ENV=test
          APP_SECRET=test
          DATABASE_URL=mysql://app:app@db:3306/app
          MAILER_DSN=null://null
          EOF

          # Optional overlay used when APP_ENV=test
          cat > .env.test <<'EOF'
          APP_ENV=test
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start containers
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml up -d

      # Ensure the env files are definitely present inside the running container
      # (useful if your compose file doesn't bind-mount ./backend to /var/www/app).
      - name: Copy env files into backend container
        run: |
          docker compose cp backend/.env backend:/var/www/app/.env
          docker compose cp backend/.env.test backend:/var/www/app/.env.test
          docker compose exec -T backend ls -la /var/www/app | grep -E '\.env$|\.env\.test$'

      - name: Run PHPUnit with coverage inside backend container
        run: |
          docker compose exec -T backend \
            sh -lc "APP_ENV=test XDEBUG_MODE=coverage php -d xdebug.mode=coverage vendor/bin/phpunit \
                   -c phpunit.dist.xml \
                   --coverage-clover var/coverage.xml \
                   --coverage-text"

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: backend/var/coverage.xml

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: backend/var/coverage.xml
          fail_ci_if_error: true
