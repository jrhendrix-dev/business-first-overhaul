security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~

    access_control:
        # most specific FIRST
        - { path: ^/api/dev/test-mail$, roles: PUBLIC_ACCESS }
        - { path: ^/api/password/forgot$, roles: PUBLIC_ACCESS }
        - { path: ^/api/password/reset$,  roles: PUBLIC_ACCESS }
        - { path: ^/api/register$,       roles: PUBLIC_ACCESS }
        - { path: ^/api/login$,          roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # any other specific exceptions (role-based)
        - { path: ^/api/classes/\d+/students, roles: ROLE_TEACHER }
        - { path: ^/api/enrollments,          roles: ROLE_USER }

        # catch-all for the rest of /api
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
